{"title":"[odoo]开发环境配置","date":"2020-02-25T10:30:16.000Z","date_formatted":{"ll":"Feb 25, 2020","L":"02/25/2020","MM-DD":"02-25"},"link":"2020/02/25/odoo/tech/odoo-开发环境配置","tags":["odoo","tech"],"categories":["odoo"],"updated":"2020-03-11T07:23:24.903Z","content":"<h1 id=\"准备\">准备<a href=\"#准备\" title=\"准备\"></a></h1><ul><li><strong>odoo源代码</strong>，这个是必须的，当前使用<a href=\"https://github.com/odoo/odoo\" target=\"_blank\">odoo 13</a>,我采用的是直接下载13.0源代码的方式，这可以忽略odoo的git history，但后期通过pull源码打补丁也就有点复杂，这个在后面再考虑了</li>\n<li><strong>python 3.7.6</strong>，最开始我用的windows app store上的python，貌似有权限问题，查了一下，从官网重新下的python，我当时看到的最新的python版本是3.8+，但这个后来通过实践，应该是没法支持odoo 13，还是老实地用3.7.6</li>\n<li><strong>vscode</strong>，python我不是很熟，IDEA作为编辑器觉得有些重量级了，拿了vscode，先试试再说。记得要装python的插件。</li>\n<li><strong>Odoo development cookbook</strong>, 这个算是入门书，比较合适，千万别看国内的翻译版，有些概念直译很难懂；我在<a href=\"https://www.packtpub.com/\" target=\"_blank\">Packpub</a>上买的，不算贵，$5；当前好像还没有13版的，就拿了12版的看了看，到目前为止，没有因为版本差异导致学不下来的；epub用MS edge还是很好的</li>\n<li><strong>docker</strong>，这应该不用说了，开发基本都要的，虽然这里只在上面起了一个postgres container，还是很方便</li>\n</ul><h1 id=\"配置启动\">配置启动<a href=\"#配置启动\" title=\"配置启动\"></a></h1><ol><li>odoo的启动方式有很多种，包括直接安装到本机、从docker启动等等，官方的文档和cookbook里都有介绍。我们这里准备做开发，当前有很多东西不是很清楚，为了能够直接的查看odoo源码，了解odoo的设计机制，我们这里采用odoo source code + postgres container的方式带起来，此处可参考cookbook。（<em>我用的windows 10，部分脚本没办法从cookbook上直接拷来用，有些要改成windows batch，但基本上改动都不会太复杂。</em>）</li>\n</ol><ul><li>通过init脚本可以生成配置文件  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%~dp0&#x2F;..&#x2F;env&#x2F;Scripts&#x2F;python.exe %~dp0&#x2F;..&#x2F;src&#x2F;odoo&#x2F;odoo-bin ^</span><br><span class=\"line\">-c %~dp0&#x2F;..&#x2F;odooae.cfg --stop-after-init ^</span><br><span class=\"line\">-d odoo ^</span><br><span class=\"line\">-i base ^</span><br><span class=\"line\">--save ^</span><br><span class=\"line\">--data-dir %~dp0&#x2F;..&#x2F;filestore ^</span><br><span class=\"line\">--addons-path %~dp0&#x2F;..&#x2F;src&#x2F;odoo&#x2F;odoo&#x2F;addons,%~dp0&#x2F;..&#x2F;src&#x2F;odoo&#x2F;addons,%~dp0&#x2F;..&#x2F;local,%~dp0&#x2F;..&#x2F;src&#x2F;partner-contact ^</span><br><span class=\"line\">--db_host&#x3D;localhost ^</span><br><span class=\"line\">--db_port&#x3D;8070 ^</span><br><span class=\"line\">--db_user&#x3D;odoo ^</span><br><span class=\"line\">--db_password&#x3D;odoo ^</span><br></pre></td></tr></table></figure></li>\n<li>通过start脚本可以启动odoo  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%~dp0&#x2F;..&#x2F;env&#x2F;Scripts&#x2F;python.exe %~dp0&#x2F;..&#x2F;src&#x2F;odoo&#x2F;odoo-bin -c %~dp0&#x2F;..&#x2F;odooae.cfg</span><br></pre></td></tr></table></figure></li>\n</ul><ol><li>cookbook也推荐了python virtualenv，通过virtualenv可以较为轻松的创建独立的python环境，以满足不同项目的不同需求。</li>\n<li>为了保证vscode对python的自动补全功能，需要配置vscode项目参数，路径为./vscode/settings.json，我这里将odoo源码路径加了进去，其他的module路径可随时自己添加,此外vscode对python的intellisense并不是很好，换用jedi，比较方便。 <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;python.pythonPath&quot;: &quot;$&#123;workspaceRoot&#125;\\\\env\\\\Scripts\\\\python.exe&quot;,</span><br><span class=\"line\">    &quot;python.autoComplete.extraPaths&quot;: [</span><br><span class=\"line\">        &quot;$&#123;workspaceRoot&#125;\\\\src\\\\odoo&quot;,</span><br><span class=\"line\">        &quot;$&#123;workspaceRoot&#125;\\\\src\\\\odoo\\\\odoo&quot;,</span><br><span class=\"line\">        &quot;$&#123;workspaceRoot&#125;\\\\src\\\\odoo\\\\odoo\\\\addons&quot;,</span><br><span class=\"line\">        &quot;$&#123;workspaceRoot&#125;\\\\src\\\\odoo\\\\addons&quot;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;python.jediEnabled&quot;: true,</span><br><span class=\"line\">    &quot;files.exclude&quot;:&#123;</span><br><span class=\"line\">        &quot;**&#x2F;*.pyc&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>我们在这里用使用git管理源代码，通过配置，我们应当只track自己的项目代码，基本上是odoo module代码，而odoo的代码或者第三方插件的代码都不做跟踪，如果考虑方便后期直接打补丁，那么可以直接git clone这些代码。</li>\n</ol><h1 id=\"调试代码\">调试代码<a href=\"#调试代码\" title=\"调试代码\"></a></h1><p>odoo在界面端增加了比较多的调试能力，但是还不足够，相比较java的调试来讲，还是差太多。我们这里想要搭建一个方便调试的环境，cookbook中提到了很多，包括使用pdb，不过没有界面，全都是控制台命令，太low了，所以想换成IDE支持的。我先后查找实践了包括pycharm、vscode这两样IDE的配置方式，pycharm自己只能搭起来run的脚本，不知道怎么去debug；vscode也是困难重重，使用launch的方式尝试带起来odoo，但最后总是挂掉，换了attach方式才解决问题。</p>\n<h2 id=\"基础\">基础<a href=\"#基础\" title=\"基础\"></a></h2><p>首先确保认真读过cookbook中关于debug的一章，都是很有用的，只不过pdb不够高效。</p>\n<ul><li>auto-reload, 通过安装watchdog，配置启动参数dev，达到变更代码后，能够自动热更新，这个相比较spring、angular都要强很多（或许我还没研究过高级功能，spring boot是要手动重启的；angular虽然能自动build，但是build的是全部模块，odoo这build的只是局部模块，速度应该是快了很多）。  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install watchdog</span><br><span class=\"line\">odoo&#x2F;odoo-bin -c ~&#x2F;odoo-dev&#x2F;my-instance.cfg --dev&#x3D;all</span><br></pre></td></tr></table></figure>\n  以上是从cookbook摘出来的相关命令，但是为了高级debug，我们把pdb从dev参数中去掉,batch命令根据以下修改。  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">odoo&#x2F;odoo-bin -c ~&#x2F;odoo-dev&#x2F;my-instance.cfg --dev&#x3D;reload,qweb,werkzeug,xml</span><br></pre></td></tr></table></figure></li>\n<li>logs，不多说了。</li>\n<li>shell，这个本来应该配合pdb使用，比较麻烦，后面应该不需要，需要的话再说</li>\n<li>pdb，这个不想用</li>\n<li>OCA matainer quality tools主要说的就是travisCI，别的项目用过，不怎么好用，有空研究下azure devops相应的做法</li>\n<li>pylint，可以在vscode setting里加，属于IDE控制范畴，如果在项目上安装，可以参照cookbook，主要是语法约束</li>\n<li>flake8，也是一个语法约束器</li>\n<li>odoo debug menu，这个看cookbook就行，还没试，应该比较厉害</li>\n</ul><h2 id=\"使用vscode进行debug\">使用vscode进行debug<a href=\"#使用vscode进行debug\" title=\"使用vscode进行debug\"></a></h2><p>vscode的debug配置通过修改./vscode/launch.json来完成，详细的介绍可以通过<a href=\"https://code.visualstudio.com/docs/editor/debugging#_launch-configurations\" target=\"_blank\">官方文档</a>来了解;主要用到的调试工具是ptvsd，全称是<a href=\"https://github.com/microsoft/ptvsd\" target=\"_blank\">Python Tools for Visual Studio debug server</a>。</p>\n<h3 id=\"使用launch方式（失败）\">使用launch方式（失败）<a href=\"#使用launch方式（失败）\" title=\"使用launch方式（失败）\"></a></h3><p>原本希望通过launch的方式进行debug，配置如下,debug模式能起来，但是总是到<code>src\\odoo\\odoo\\tools\\config.py</code>这个运行过程就会raise exception，odoo最后也没有带起来。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &#x2F;&#x2F; Use IntelliSense to learn about possible attributes.</span><br><span class=\"line\">  &#x2F;&#x2F; Hover to view descriptions of existing attributes.</span><br><span class=\"line\">  &#x2F;&#x2F; For more information, visit: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class=\"line\">  &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">  &quot;configurations&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;name&quot;: &quot;odoo&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;python&quot;,</span><br><span class=\"line\">      &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">      &quot;stopOnEntry&quot;: false,</span><br><span class=\"line\">      &quot;console&quot;: &quot;integratedTerminal&quot;,</span><br><span class=\"line\">      &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;\\\\src\\\\odoo\\\\odoo-bin&quot;,</span><br><span class=\"line\">      &quot;args&quot;: [&quot;--config&quot;, &quot;$&#123;workspaceRoot&#125;\\\\odooae.cfg&quot;],</span><br><span class=\"line\">      &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class=\"line\">      &quot;pythonPath&quot;: &quot;$&#123;config:python.pythonPath&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过查看exception上下文，感觉像是odoo还没有读到自定义的配置文件，就直接挂了，具体的原因这里没有推断出来，不做过多阐述了。</p>\n<h3 id=\"使用attach方式\">使用attach方式<a href=\"#使用attach方式\" title=\"使用attach方式\"></a></h3><p>通过摸索launch方式，感觉ptvsd介入的过早了，可能导致odoo起来就挂掉，所以按attach方式，手动设置debug切入点，具体使用可以查看官网。</p>\n<ol><li>我直接在配置完成点（即<code>src\\odoo\\odoo\\tools\\config.py</code>尾部）放置debug切入点，如下。 <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config &#x3D; configmanager()</span><br><span class=\"line\"></span><br><span class=\"line\"># debug inception</span><br><span class=\"line\">import ptvsd</span><br><span class=\"line\">ptvsd.enable_attach()</span><br><span class=\"line\">ptvsd.wait_for_attach()</span><br></pre></td></tr></table></figure></li>\n<li>相应的luanch.json需要做修改 <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Use IntelliSense to learn about possible attributes.</span><br><span class=\"line\">    &#x2F;&#x2F; Hover to view descriptions of existing attributes.</span><br><span class=\"line\">    &#x2F;&#x2F; For more information, visit: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class=\"line\">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">    &quot;configurations&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;odoo&quot;,</span><br><span class=\"line\">        &quot;type&quot;: &quot;python&quot;,</span><br><span class=\"line\">        &quot;request&quot;: &quot;attach&quot;,</span><br><span class=\"line\">        &quot;port&quot;: 5678,</span><br><span class=\"line\">        &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">        &quot;pathMappings&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            &quot;localRoot&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class=\"line\">            &quot;remoteRoot&quot;: &quot;$&#123;workspaceFolder&#125;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>接下来可以debug了，还是通过启动脚本带起来odoo，不过，由于debug切入点的配置，odoo会停在那，等着ptvsd的接入。</li>\n<li>最后我们点击vscode的debug或者F5，通过ptvsd接进去就可以了，然后就可以愉快地调试了。</li>\n</ol>","prev":{"title":"[odoo]个人、公司、平台账户、组","link":"2020/03/11/odoo/biz/odoo-个人、公司、平台账户、组"},"next":{"title":"Hello World","link":"2020/02/05/hello-world"},"plink":"http://thewalk.github.io/2020/02/25/odoo/tech/odoo-开发环境配置/","toc":[{"id":"准备","title":"准备","index":"1"},{"id":"配置启动","title":"配置启动","index":"2"},{"id":"调试代码","title":"调试代码","index":"3","children":[{"id":"基础","title":"基础","index":"3.1"},{"id":"使用vscode进行debug","title":"使用vscode进行debug","index":"3.2","children":[{"id":"使用launch方式（失败）","title":"使用launch方式（失败）","index":"3.2.1"},{"id":"使用attach方式","title":"使用attach方式","index":"3.2.2"}]}]}]}